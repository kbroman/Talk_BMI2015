// Generated by CoffeeScript 1.10.0
var bandwidth, make_density, stop_density;

bandwidth = 1;

make_density = function() {
  return d3.json("Data/density.json", function(mixData) {
    var args, bwtext, densityEstimate, dnorm, line, nPoints, path, svgscale, threedigits, twodigits, xMax, xMin;
    twodigits = d3.format(".2f");
    threedigits = d3.format(".3f");
    nPoints = 250;
    xMin = 10;
    xMax = 50;
    dnorm = function(x) {
      return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);
    };
    densityEstimate = function(data, bw, minx, maxx, numpoints) {
      var i, j, k, l, m, ref, ref1, ref2, xy;
      xy = [];
      for (i = k = 0, ref = numpoints; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        xy[i] = {
          x: minx + (maxx - minx) * i / numpoints,
          y: 0.0
        };
      }
      for (i = l = 0, ref1 = numpoints; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        for (j = m = 0, ref2 = data.length; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
          xy[i].y += dnorm((xy[i].x - data[j]) / bw) / bw / data.length;
        }
      }
      return xy;
    };
    args = {
      chartname: "#density_estimate",
      xlab: "",
      ylab: "",
      pad: {
        bottom: 90,
        left: 100,
        top: 0,
        right: 10,
        scale: 0.05
      },
      tickPadding: 8,
      ylab_rotate: 0
    };
    svgscale = plotframe(densityEstimate(mixData, 0.1, xMin, xMax, nPoints), args);
    line = d3.svg.line().x(function(d) {
      return svgscale.x(d.x);
    }).y(function(d) {
      return svgscale.y(d.y);
    }).interpolate("linear");
    path = svgscale.svg.append("svg:path").attr("fill", "none").attr("stroke", "slateblue").attr("stroke-width", 3).attr("d", line(densityEstimate(mixData, bandwidth, xMin, xMax, nPoints)));
    bwtext = d3.select("body").selectAll("#bandwidth");
    return d3.select("input[type=range]").on("input", function() {
      bandwidth = Math.pow(10, this.value);
      path.transition().attr("d", line(densityEstimate(mixData, bandwidth, xMin, xMax, nPoints)));
      if (bandwidth > 0.095) {
        return bwtext.transition().text("Bandwidth = " + twodigits(bandwidth));
      } else {
        return bwtext.transition().text("Bandwidth = " + threedigits(bandwidth));
      }
    });
  });
};

stop_density = function() {
  return d3.select("div#density_estimate svg").remove();
};
