// Generated by CoffeeScript 1.8.0
d3.json("Data/density.json", function(mixData) {
  var args, bandwidth, bwtext, densityEstimate, dnorm, line, nPoints, path, svgscale, threedigits, twodigits, xMax, xMin;
  twodigits = d3.format(".2f");
  threedigits = d3.format(".3f");
  bandwidth = 1;
  nPoints = 250;
  xMin = 10;
  xMax = 50;
  dnorm = function(x) {
    return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);
  };
  densityEstimate = function(data, bw, minx, maxx, numpoints) {
    var i, j, xy, _i, _j, _k, _ref;
    xy = [];
    for (i = _i = 0; 0 <= numpoints ? _i < numpoints : _i > numpoints; i = 0 <= numpoints ? ++_i : --_i) {
      xy[i] = {
        x: minx + (maxx - minx) * i / numpoints,
        y: 0.0
      };
    }
    for (i = _j = 0; 0 <= numpoints ? _j < numpoints : _j > numpoints; i = 0 <= numpoints ? ++_j : --_j) {
      for (j = _k = 0, _ref = data.length; 0 <= _ref ? _k < _ref : _k > _ref; j = 0 <= _ref ? ++_k : --_k) {
        xy[i].y += dnorm((xy[i].x - data[j]) / bw) / bw / data.length;
      }
    }
    return xy;
  };
  args = {
    chartname: "#density_estimate",
    xlab: "",
    ylab: "",
    pad: {
      bottom: 90,
      left: 100,
      top: 0,
      right: 10,
      scale: 0.05
    },
    tickPadding: 8,
    ylab_rotate: 0
  };
  svgscale = plotframe(densityEstimate(mixData, 0.1, xMin, xMax, nPoints), args);
  line = d3.svg.line().x(function(d) {
    return svgscale.x(d.x);
  }).y(function(d) {
    return svgscale.y(d.y);
  }).interpolate("linear");
  path = svgscale.svg.append("svg:path").attr("fill", "none").attr("stroke", "slateblue").attr("stroke-width", 3).attr("d", line(densityEstimate(mixData, bandwidth, xMin, xMax, nPoints)));
  bwtext = d3.select("body").selectAll("#bandwidth");
  return d3.select("input[type=range]").on("change", function() {
    bandwidth = Math.pow(10, this.value);
    path.transition().attr("d", line(densityEstimate(mixData, bandwidth, xMin, xMax, nPoints)));
    if (bandwidth > 0.095) {
      return bwtext.transition().text("Bandwidth = " + twodigits(bandwidth));
    } else {
      return bwtext.transition().text("Bandwidth = " + threedigits(bandwidth));
    }
  });
});
